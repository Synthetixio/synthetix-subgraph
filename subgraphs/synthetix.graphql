# Synthentix is an aggregation entity
type Synthetix @entity {
  id: ID!
  issuers: BigInt!
  snxHolders: BigInt!
}

# Transfer tracks this event from the Synthetix.sol contract and various Synth.sol contracts
type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  timestamp: BigInt!
  block: BigInt!
  source: String!
}

# Issued tracks this event from various Synth.sol instances
type Issued @entity {
  id: ID!
  account: Bytes! # address
  value: BigInt!
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

# An individual Issuer
type Issuer @entity {
  id: ID!
}

# An individual SNX holder (always overridden with their latest information)
type SNXHolder @entity {
  id: ID! # address of potential holder
  # last block where an event happened
  block: BigInt!
  timestamp: BigInt!
  balanceOf: BigInt
  # the following will be null before multicurrency (v2) release
  collateral: BigInt
  transferable: BigInt
  initialDebtOwnership: BigInt
  debtEntryAtIndex: BigInt
}

# A historical debt tracker
type DebtSnapshot @entity {
  id: ID!
  # last block where an event happened
  block: BigInt!
  timestamp: BigInt!
  account: Bytes! # address
  balanceOf: BigInt # early on it was possible this wouldn't have a value (pre v2)
  # the following will be null before multicurrency (v2) release
  collateral: BigInt
  debtBalanceOf: BigInt
}

type SynthHolder @entity {
  id: ID! # address and synth of the holder
  synth: String! # the synth's currencyKey
  # last block where an event happened
  block: BigInt!
  timestamp: BigInt!
  # the balance at the time
  balanceOf: BigInt!
}

# Burned tracks this event from various Synth.sol instances
type Burned @entity {
  id: ID!
  account: Bytes! # address
  value: BigInt! # uint256
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

# Tracks new Synthetix, ExchangeRates and FeePool contracts
type ContractUpdated @entity {
  id: ID!
  source: String!
  target: Bytes! # address
  block: BigInt!
  timestamp: BigInt!
}

type RewardEscrowHolder @entity {
  id: ID!
  balanceOf: BigInt!
}

type FeesClaimed @entity {
  id: ID!
  account: Bytes! # address
  value: BigInt! # uint256
  rewards: BigInt! # uint256
  block: BigInt!
  timestamp: BigInt!
}

type DailyExchangePartner @entity {
  id: ID! # the day timestamp + the tracking code of the partner
  usdVolume: BigInt!
  trades: BigInt!
}

type ExchangePartner @entity {
  id: ID! # the tracking code of the partner
  usdVolume: BigInt!
  trades: BigInt!
}

# Temporarily add rates entities until the Graph adds composability between subgraphs
# RatesUpdated tracks this event from the ExchangeRates.sol contract
type RatesUpdated @entity {
  id: ID!
  from: Bytes! # address
  currencyKeys: [Bytes!]! # bytes4[]
  newRates: [BigInt!]! # uint256[]
  gasPrice: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# An individual RateUpdate - split out of RatesUpdated event
type RateUpdate @entity {
  id: ID!
  currencyKey: Bytes!
  synth: String!
  rate: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# A chainlink Answer
type AggregatorAnswer @entity {
  id: ID!
  currencyKey: Bytes!
  synth: String!
  aggregator: Bytes!
  rate: BigInt!
  roundId: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# The average price of SNX over a 15 minute period
type FifteenMinuteSNXPrice @entity {
  id: ID!
  count: BigInt!
  averagePrice: BigInt!
}

# The average price of SNX over a day
type DailySNXPrice @entity {
  id: ID!
  count: BigInt!
  averagePrice: BigInt!
}

type LatestRate @entity {
  id: ID! # the name of the synth
  rate: BigInt!
}
