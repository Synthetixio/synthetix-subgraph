type Account @entity {
  "NFT token id"
  id: ID!
  owner: Bytes!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  permissions: [AccountPermissionUsers!]
}

type AccountPermissionUsers @entity {
  "NFT token id + user address"
  id: ID!
  address: Bytes!
  account: Account!
  permissions: [Bytes!]!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
}

type OrderSettled @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  accountId: BigInt!
  account: Account!
  orderCommitted: OrderCommitted
  fillPrice: BigInt!
  accruedFunding: BigInt!
  sizeDelta: BigInt!
  newSize: BigInt!
  totalFees: BigInt!
  referralFees: BigInt!
  collectedFees: BigInt!
  settlementReward: BigInt!
  trackingCode: Bytes!
  settler: Bytes!
  pnl: BigInt!
  txnHash: String!
}

type OrderCommitted @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  accountId: BigInt!
  account: Account!
  orderType: Int!
  sizeDelta: BigInt!
  acceptablePrice: BigInt!
  commitmentTime: BigInt!
  expectedPriceTime: BigInt!
  settlementTime: BigInt!
  expirationTime: BigInt!
  trackingCode: Bytes!
  sender: Bytes!
  txnHash: String!
}

type PendingOrder @entity {
  id: ID!
  orderCommittedId: String!
}

type PerpsV3Position @entity {
  id: ID!
  openTimestamp: BigInt!
  closeTimestamp: BigInt
  timestamp: BigInt!
  marketId: BigInt!
  marketSymbol: String!
  accountId: BigInt!
  account: Account!
  isOpen: Boolean!
  isLiquidated: Boolean!
  totalTrades: BigInt!
  totalVolume: BigInt!
  size: BigInt!
  realizedPnl: BigInt!
  totalReducedNotional: BigInt!
  feesPaid: BigInt!
  netFunding: BigInt!
  pnlWithFeesPaid: BigInt!
  entryPrice: BigInt!
  avgEntryPrice: BigInt!
  lastPrice: BigInt!
  exitPrice: BigInt
}

type OpenPerpsV3Position @entity {
  id: ID!
  position: PerpsV3Position
}

type PerpsV3Market @entity {
  id: ID!
  marketName: String!
  marketSymbol: String!
  lastPrice: BigInt!
}

type SettlementStrategy @entity {
  id: ID!
  strategyId: BigInt!
  marketId: BigInt!
  enabled: Boolean!
  strategyType: Int!
  settlementDelay: BigInt!
  settlementWindowDuration: BigInt!
  priceVerificationContract: String!
  feedId: Bytes!
  settlementReward: BigInt!
  commitmentPriceDelay: BigInt!
}

type FundingRateUpdate @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  fundingRate: BigInt!
  marketName: String!
  marketSymbol: String!
}

type FundingRatePeriod @entity {
  id: ID!
  timestamp: BigInt!
  fundingRate: BigInt!
  marketName: String!
  marketSymbol: String!
  period: FundingRatePeriodType!
}

enum FundingRatePeriodType {
  Hourly
  Daily
}

type DelegatedAccount @entity {
  id: ID!
  caller: Bytes! # address
  delegate: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollateralChange @entity {
  id: ID!
  synthId: BigInt!
  accountId: BigInt!
  sender: Bytes!
  timestamp: BigInt!
  amountDelta: BigInt!
  txHash: String!
}

type PerpsV3Stat @entity {
  id: ID!
  accountId: BigInt!
  accountOwner: Bytes!
  feesPaid: BigInt!
  pnl: BigInt!
  pnlWithFeesPaid: BigInt!
  liquidations: BigInt!
  totalTrades: BigInt!
  totalVolume: BigInt!
}

type PerpsV3AggregateStat @entity {
  id: ID!
  period: BigInt!
  timestamp: BigInt!
  marketId: BigInt!
  marketSymbol: String!
  trades: BigInt!
  volume: BigInt!
}

type PnlSnapshot @entity {
  id: ID!
  accountId: BigInt!
  pnl: BigInt!
  timestamp: BigInt!
}

type MarketPriceUpdate @entity {
  id: ID!
  timestamp: BigInt!
  marketId: BigInt!
  price: BigInt!
}

type PositionLiquidation @entity {
  id: ID!
  accountId: BigInt!
  account: Account!
  timestamp: BigInt!
  marketId: BigInt!
  amount: BigInt!
  notionalAmount: BigInt!
  estimatedPrice: BigInt!
}
