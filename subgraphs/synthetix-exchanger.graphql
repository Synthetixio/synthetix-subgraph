type ExchangeEntrySettled @entity {
  id: ID!
  from: Bytes!
  src: Bytes!
  amount: BigInt!
  dest: Bytes!
  reclaim: BigInt!
  rebate: BigInt!
  srcRoundIdAtPeriodEnd: BigInt!
  destRoundIdAtPeriodEnd: BigInt!
  exchangeTimestamp: BigInt!
}

type ExchangeEntryAppended @entity {
  id: ID! # the transaction hash plus event log
  account: Bytes!
  src: Bytes!
  amount: BigInt!
  dest: Bytes!
  amountReceived: BigInt!
  exchangeFeeRate: BigInt!
  roundIdForSrc: BigInt!
  roundIdForDest: BigInt!
}

type TemporaryExchangePartnerTracker @entity {
  " Transaction hash of the Exchange event "
  id: ID!

  " Total transaction volume in USD across all ExchangeEntryAppended events in a single tx hash "
  usdVolume: BigDecimal

  " Total fees from this transaction hash "
  usdFees: BigDecimal

  " String format of the tracking code for a given partner "
  partner: String
}

type DailyExchangePartner @entity {
  " Day timestamp + tracking code of the partner "
  id: ID!

  " Total transaction volume in USD for the partner on this day "
  usdVolume: BigDecimal!

  " Total fees generated by the volume partner for this day "
  usdFees: BigDecimal!

  " Total number of trades from the volume partner for this day "
  trades: BigInt!

  " Tracking code of the partner "
  partner: String!

  " a string id representing the day "
  dayID: String!
}

type ExchangePartner @entity {
  " Tracking code of the partner "
  id: ID!

  " Total transaction volume in USD for the partner "
  usdVolume: BigDecimal!

  " Total fees generated by the volume partner "
  usdFees: BigDecimal!

  " Total number of trades from the volume partner "
  trades: BigInt!
}

# Temporarily add rates entities until the Graph adds composability between subgraphs
# RatesUpdated tracks this event from the ExchangeRates.sol contract
type RatesUpdated @entity {
  id: ID!
  from: Bytes! # address
  currencyKeys: [Bytes!]! # bytes4[]
  newRates: [BigInt!]! # uint256[]
  gasPrice: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# An individual RateUpdate - split out of RatesUpdated event
type RateUpdate @entity {
  id: ID!
  currencyKey: Bytes!
  synth: String!
  rate: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# A chainlink Answer
type AggregatorAnswer @entity {
  id: ID!
  currencyKey: Bytes!
  synth: String!
  aggregator: Bytes!
  rate: BigInt!
  roundId: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# The average price of SNX over a 15 minute period
type FifteenMinuteSNXPrice @entity {
  id: ID!
  count: BigInt!
  averagePrice: BigInt!
}

# The average price of SNX over a day
type DailySNXPrice @entity {
  id: ID!
  count: BigInt!
  averagePrice: BigInt!
}

type LatestRate @entity {
  " Name of synth. E.g. sUSD "
  id: ID!

  " Synth USD rate with 18 decimals "
  rate: BigInt!
}

type DailyCandle @entity {
  " DailyEpoch-Asset. E.g. 18361-sETH "
  id: ID!
  synth: String!
  open: BigInt!
  high: BigInt!
  low: BigInt!
  close: BigInt!
  timestamp: BigInt!
}
